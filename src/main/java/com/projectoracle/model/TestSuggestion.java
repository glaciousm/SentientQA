package com.projectoracle.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.projectoracle.service.MethodInfo;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Represents a test case suggestion generated by the system.
 * Contains information about what to test, how to test it, and the expected outcome.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class TestSuggestion {

    private UUID id;
    private MethodInfo methodInfo;
    private String testName;
    private String inputValues;
    private String expectedOutput;
    private String category;
    private LocalDateTime createdAt;
    private boolean implemented;
    private UUID implementedTestId;

    /**
     * Generate a test method name based on the suggestion
     * @return a method name in the format testMethodName_scenario
     */
    public String generateTestMethodName() {
        String baseMethodName = methodInfo.getMethodName();

        // Ensure first character is uppercase for the test method name
        baseMethodName = Character.toUpperCase(baseMethodName.charAt(0)) + baseMethodName.substring(1);

        // Create a scenario part from the test name
        String scenarioPart = testName
                .replaceAll("[^a-zA-Z0-9]", " ")  // Replace non-alphanumeric with spaces
                .trim()
                .replaceAll("\\s+", "_");         // Replace spaces with underscores

        // If scenario is too long, truncate it
        if (scenarioPart.length() > 30) {
            scenarioPart = scenarioPart.substring(0, 30);
        }

        return "test" + baseMethodName + "_" + scenarioPart;
    }

    /**
     * Generate code for a test case based on this suggestion
     * @return Java code for a JUnit 5 test
     */
    public String generateTestCode() {
        StringBuilder codeBuilder = new StringBuilder();

        // Package and imports
        codeBuilder.append("package ").append(methodInfo.getPackageName()).append(".test;\n\n");
        codeBuilder.append("import org.junit.jupiter.api.Test;\n");
        codeBuilder.append("import static org.junit.jupiter.api.Assertions.*;\n");
        codeBuilder.append("import ").append(methodInfo.getPackageName()).append(".")
                   .append(methodInfo.getClassName()).append(";\n\n");

        // Test class
        codeBuilder.append("public class Test").append(methodInfo.getClassName()).append(" {\n\n");

        // Test method
        codeBuilder.append("    /**\n");
        codeBuilder.append("     * ").append(testName).append("\n");
        codeBuilder.append("     * Category: ").append(category).append("\n");
        codeBuilder.append("     */\n");
        codeBuilder.append("    @Test\n");
        codeBuilder.append("    public void ").append(generateTestMethodName()).append("() {\n");

        // Method implementation
        codeBuilder.append("        // Arrange\n");
        codeBuilder.append("        ").append(methodInfo.getClassName()).append(" instance = new ")
                   .append(methodInfo.getClassName()).append("();\n");

        // Add input setup based on the suggestion
        codeBuilder.append("        // Input values: ").append(inputValues).append("\n");

        // Add test logic
        codeBuilder.append("\n        // Act\n");

        // Handle return type
        if (!"void".equals(methodInfo.getReturnType())) {
            codeBuilder.append("        ").append(methodInfo.getReturnType()).append(" result = ");
        } else {
            codeBuilder.append("        ");
        }

        // Method call
        codeBuilder.append("instance.").append(methodInfo.getMethodName()).append("(/* TODO: Add parameters */);\n");

        // Assert section
        codeBuilder.append("\n        // Assert\n");
        codeBuilder.append("        // Expected: ").append(expectedOutput).append("\n");

        if (!"void".equals(methodInfo.getReturnType())) {
            codeBuilder.append("        // TODO: Replace with appropriate assertion\n");
            codeBuilder.append("        // assertEquals(expected, result);\n");
        } else {
            codeBuilder.append("        // TODO: Add appropriate verification\n");
        }

        // Close method and class
        codeBuilder.append("    }\n");
        codeBuilder.append("}\n");

        return codeBuilder.toString();
    }
}